package com.example.dblearning.fragments.update

import android.app.AlertDialog
import android.os.Bundle
import android.text.Editable
import android.text.TextUtils
import android.view.*
import androidx.fragment.app.Fragment
import android.widget.Toast
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.example.dblearning.R
import com.example.dblearning.databinding.FragmentUpdateBinding
import com.example.dblearning.model.User
import com.example.dblearning.viewmodel.UserViewModel

class UpdateFragment : Fragment() {

    private lateinit var binding: FragmentUpdateBinding
    private val args by navArgs<UpdateFragmentArgs>()
    private lateinit var mUserViewModel: UserViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentUpdateBinding.inflate(layoutInflater)

        mUserViewModel = ViewModelProvider(this).get(UserViewModel::class.java)

        setArgs(binding, args)

        binding.updateButton.setOnClickListener {
            updateDataToDatabase()
        }

        // Add menu
        setHasOptionsMenu(true)

        return binding.root
    }

    // Таким образом мы присваиваем элементам вьюшки аргументы, которые передали в классе ListAdapter
    private fun setArgs(itemBinding: FragmentUpdateBinding, args: UpdateFragmentArgs) {
        itemBinding.updateTextFirstName.setText(args.currentUser.firstName)
        itemBinding.updateTextLastName.setText(args.currentUser.lastName)
        itemBinding.updateTextAge.setText(args.currentUser.age.toString())
    }

    private fun updateDataToDatabase() {
        val firstName = binding.updateTextFirstName.text.toString()
        val lastName = binding.updateTextLastName.text.toString()
        // int из edittext возвращается как Editable
        val age = binding.updateTextAge.text

        if(inputCheck(firstName, lastName, age)) {
            // Create User Object, Id is pk and autogenerated
            val updatedUser = User(args.currentUser.id, firstName, lastName, Integer.parseInt(age.toString()))
            // Add Data to Database
            mUserViewModel.updateUser(updatedUser)
            Toast.makeText(requireContext(), "Successfully Updated!", Toast.LENGTH_LONG).show()
            // Navigate Back
            findNavController().navigate(R.id.action_updateFragment_to_listFragment)
        }else{
            Toast.makeText(requireContext(), "Invalid fields.", Toast.LENGTH_LONG).show()
        }
    }

    private fun inputCheck(firstName: String, lastName: String, age: Editable) : Boolean {
        return (!TextUtils.isEmpty(firstName)
                && !TextUtils.isDigitsOnly(firstName)
                && !TextUtils.isEmpty(lastName)
                && !TextUtils.isDigitsOnly(lastName)
                && age.isNotEmpty())
    }

    // inflate layout for our menu
    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        inflater.inflate(R.menu.delete_menu, menu)
    }

    // handle clicks
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        if(item.itemId == R.id.menu_delete) {
            deleteUser()
        }
        return super.onOptionsItemSelected(item)
    }

    private fun deleteUser() {
        // создает окно предупреждения
        val builder = AlertDialog.Builder(requireContext())
        builder.setPositiveButton("Yes") { _, _ ->
            mUserViewModel.deleteUser(args.currentUser)
            Toast.makeText(requireContext(),
                "Removed: ${args.currentUser.firstName}",
                Toast.LENGTH_SHORT).show()
            findNavController().navigate(R.id.action_updateFragment_to_listFragment)
        }

        builder.setNegativeButton("No") {_, _ ->}
        builder.setTitle("Delete ${args.currentUser.firstName}?")
        builder.setMessage("Are you sure you want to delete ${args.currentUser.firstName}?")
        builder.create().show()
    }
}